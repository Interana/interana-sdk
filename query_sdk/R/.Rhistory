} else {
index <- index + 1
}
}
}
}
rowCnt <- 1
columnName <- c()
# loop through each column
for (values in result$columns) {
for (column in values) {
for (item in column) {
if ((rowCnt %% 2)==0 ) {
print(item)
columnName <-c(columnName, item)
}
rowCnt = rowCnt +1
}
}
}
colnames(mat) <-columnName
df <- as.data.frame(mat)
httr::GET('https://this.url.api.com:334/api/endpoint',
accept_json(),
add_headers('Authorization' = 'Bearer 31232187asdsadh23187'))
url <- "https://jobcase.interana.com/api/v1/query?query=%7B%0A%20%20%22dataset%22%3A%20%22events%22%2C%0A%20%20%22start%22%3A%201477281600000%2C%0A%20%20%22end%22%3A%201478145600000%2C%0A%20%20%22queries%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22type%22%3A%20%22single_measurement%22%2C%0A%20%20%20%20%20%20%22measure%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22aggregator%22%3A%20%22COUNT_STAR%22%2C%0A%20%20%20%20%20%20%20%20%22column%22%3A%20%22%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%22filter%22%3A%20%22%22%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22group_by%22%3A%20%5B%0A%20%20%20%20%22email_template_name%22%0A%20%20%5D%2C%0A%20%20%22sampled%22%3A%20true%0A%7D"
url
httr::GET(url,
accept_json(),
add_headers('Authorization' = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000'))
straighten(httr::GET(url,
accept_json(),
add_headers('Authorization' = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000')))
toJSON(straighten(httr::GET(url,
accept_json(),
add_headers('Authorization' = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000'))))
response <- straighten(httr::GET(url,
accept_json(),
add_headers('Authorization' = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000')))
install.packages("request")
library("request")
api('https://api.github.com/')
api('https://api.github.com/') %>% http()
repo_info <- list(username = 'craigcitro', repo = 'r-travis')
repo_info
api('https://api.github.com/') %>%
api_template(template = 'repos///issues', data = repo_info)
api('http://httpbin.org/headers') %>%
api_headers(`X-FARGO-SEASON` = 3, `X-NARCOS-SEASON` = 5) %>%
peep
api(url) %>%
api_headers(`Authorization` = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000') %>%
peep
api(url) %>%
api_headers(`Authorization` = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000')
url
api(url)
Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000
api_headers(`Authorization` = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000')
api_headers(`Authorization`='Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000')
getdata <- GET(url,
+           accept_json(),
+           add_headers('Authorization' = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000'))
getdata <- GET(url, accept_json(), add_headers('Authorization' = 'Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000'))
getdata
fromJSON(content(getdata,type="text"))
toJSON(fromJSON(content(getdata,type="text")))
fromJSON(content(getdata,type="json"))
fromJSON(content(getdata,type="text"))
results <- fromJSON(content(getdata,type="text"))
results
results$rows
results$rows[1]
results$rows[[1]
;
results$rows[[1]]
url
list(key1 = "value 1", "key 2" = "value2", key2 = NULL))
list(key1 = "value 1", "key 2" = "value2", key2 = NULL)
r <- GET("http://httpbin.org/get",
query = list(key1 = "value 1", "key 2" = "value2", key2 = NULL))
r
content(r)$args
list("end_time"="foo")
list('end_time'="foo")
list(`end_time`="foo")
list("end_time"="foo")
list("end_time"="foo", "start_time" = "bar")
date()
date().utc()
utc()
stri_datetime_now()
sys.time()
Sys.time()
as.Date(’02/03/2004′,’%m/%d/%Y’)
as.Date('02/03/2004','%m/%d/%Y')
as.Date(Sys.Date(),'%m/%d/%Y')
as.Date(Sys.Date())
as.Date(Sys.Date(),"%m")
strftime(Sys.Date(),’%A: %B %d, %Y (Day %j of %Y)’)
strftime(Sys.Date(),'%A: %B %d, %Y (Day %j of %Y)')
strftime(Sys.Date(),'%m/%d/%Y')
strftime(Sys.Date(),'%m/%d/%Y %H:%M:%S')
strftime(Sys.time(),'%m/%d/%Y %H:%M:%S')
strftime(Sys.time(),'%m/%d/%Y %H:%M:%S')
strftime(Sys.time()-10,'%m/%d/%Y %H:%M:%S')
strftime(Sys.time()-10,'%m/%d/%Y %H:%M:%S')
strftime(Sys.time(),'%m/%d/%Y %H:%M:%S')
strftime(Sys.time()-10,'%m/%d/%Y %H:%M:%S')
class(date())
Sys.Date()
class(Sys.Date())
require(chron)
tm1.c <- as.chron("2013-07-24 23:55:26")
tm1.c
dates(tm1.c)
tm1.c <- as.chron(Sys.time())
tm1.c
tm1.c+10
tm1.c
tm1.c-10
tm1.c-20
tm1.c-1000
list("end_time"="foo", "start_time" = "bar")
end_time <- as.chron(Sys.time())
end_time
end_time - 100
start_time <- end_time-100
start_time
list("end_time"=end_time, "start_time" = start_time)
list("end"=end_time, "start" = start_time)
end_time
class(end_time)
as.integer(end_time)
as.POSIXct( Sys.time() )
as.integer( as.POSIXct( times ) , tz = "UTC" )
as.POSIXct( times )
as.POSIXct( Sys.time() )
as.POSIXct( Sys.time() ), as.integer( as.POSIXct( times ) , tz = "BST" )
as.integer( as.POSIXct( Sys.time() ) , tz = "UTC" )
1484262997
as.POSIXct( Sys.time() )
as.POSIXct( Sys.time()-10 )
end_time
as.POSIXct(end_time)
as.POSIXct(end_time-10)
as.integer( as.POSIXct( end_time ) , tz = "UTC" )
start_time
as.integer( as.POSIXct( start_time ) , tz = "UTC" )
list("end"=end_time, "start" = start_time)
list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000)
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000)
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music")
queries = list()
queries
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", queries=query_obj)
query_obj = list()
query_obj
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", queries=query_obj)
params
query_obj
query_item = list("type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
http://www.businessinsider.com/ganja-yoga-review-san-francisco-2017-1
query_item
queries=list("query" = query_item)
params
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", queries=query_obj)
params
queries
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", queries=queries)
params
r <- GET("http://httpbin.org/get",
+          query = list(key1 = "value 1", "key 2" = "value2", key2 = NULL)
r <- GET("https://demo.interana.com/api/v1/query", query = queries)
queries
r <- GET("https://demo.interana.com/api/v1/query", query = params)
r
r <- GET("https://demo.interana.com/api/v1/query", accept_json(), add_headers('Authorization' = 'Token tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000'), query = params)
r
params
toJSON(params)
r <- GET("https://demo.interana.com/api/v1/query", accept_json(), add_headers('Authorization' = 'Token tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000'), query = toJSON(params))
r
query_item = list("type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
query_item
query_item = list("filter" = null, type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
query_item = list("filter" = NULL, type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
query_item = list("filter" = NULL, "type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
query_item
queries=list("query" = query_item)
queries
queries=["query" = query_item]
queries=list("query" = query_item)
queries
toJSON(query_item)
queries
queries=list("queries" = query_item)
queries
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "query" = list(queries))
params
url <- "https://demo.interana.com/api/v1/query"
token <- "Token tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000"
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = toJSON(params))
r
query_param <- "query=" + query
query_param <- "query=" + params
query_param
params
toJSON(params)
"query=" . toJSON(params)
"query=" + toJSON(params)
paste("query=",toJSON(params))
paste("query=",toJSON(params),sep = "")
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",toJSON(params),sep = ""))
r
r$url
r <- GET("https://demo.interana.com/api/v1/query?query={\"end\":1484262547000,\"start\":1475622547000,\"dataset\":\"music\",\"query\":[{\"queries\":{\"filter\":null,\"type\":\"single_measurement\",\"measure\":{\"aggregator\":\"count_star\",\"column\":\"\"}}}]}", accept_json(), add_headers('Authorization' = token))
r
r <- GET('https://demo.interana.com/api/v1/query?query={"end":1484262547000,"start":1475622547000,"dataset":"music","query":[{"queries":{"filter":null,"type":"single_measurement","measure":{"aggregator":"count_star","column":""}}}]}', accept_json(), add_headers('Authorization' = token))
r
URLencode("a url with spaces and / and @")
params
toJSON(params)
URLencode(toJSON(params))
URLencode(params)
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
r
r$url
URLdecode(y)
URLdecode(r$url)
works <- "https://jobcase.interana.com/api/v1/query?query=%7B%0A%20%20%22dataset%22%3A%20%22events%22%2C%0A%20%20%22start%22%3A%201477281600000%2C%0A%20%20%22end%22%3A%201478145600000%2C%0A%20%20%22queries%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22type%22%3A%20%22single_measurement%22%2C%0A%20%20%20%20%20%20%22measure%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22aggregator%22%3A%20%22COUNT_STAR%22%2C%0A%20%20%20%20%20%20%20%20%22column%22%3A%20%22%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%22filter%22%3A%20%22%22%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22group_by%22%3A%20%5B%0A%20%20%20%20%22email_template_name%22%0A%20%20%5D%2C%0A%20%20%22sampled%22%3A%20true%0A%7D”
""
""
works <- "https://jobcase.interana.com/api/v1/query?query=%7B%0A%20%20%22dataset%22%3A%20%22events%22%2C%0A%20%20%22start%22%3A%201477281600000%2C%0A%20%20%22end%22%3A%201478145600000%2C%0A%20%20%22queries%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22type%22%3A%20%22single_measurement%22%2C%0A%20%20%20%20%20%20%22measure%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22aggregator%22%3A%20%22COUNT_STAR%22%2C%0A%20%20%20%20%20%20%20%20%22column%22%3A%20%22%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%22filter%22%3A%20%22%22%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22group_by%22%3A%20%5B%0A%20%20%20%20%22email_template_name%22%0A%20%20%5D%2C%0A%20%20%22sampled%22%3A%20true%0A%7D"
works
URLdecode(works)
params
toJSON(params)
query_item
query_item["filter"]
query_item["filter"] <- ""
query_item
toJSON(query_item)
list(toJSON(query_item))
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "query" = list(queries))
params
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "queries" = list(toJSON(query_item)))
params
toJSON(params)
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "queries" = list(query_item))
params
toJSON(params)
url
token
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
r
content(r)
c <- content(r)
install.packages("xml2")
c <- content(r)
c
class(c)
c
toJSON(c)
print c
fromJSON(c)
fromJSON(content(r))
content(r)
content(r,as = "text"))
content(r,as = "json"))
content(r,as = "json")
content(r,as = "text")
toJSON(content(r,as = "text"))
fromJSON(content(r,as = "text"))
r_data <- fromJSON(content(r,as = "text"))
query_item = list("filter" = "", "type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "queries" = list(query_item))
url <- "https://demo.interana.com/api/v1/query"
token <- "Token tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000"
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
r
response <- fromJSON(content(r,as = "text"))
response
str(response)
print(str(response))
print(str(toJSON(response)))
library(curlconverter)
library(jsonlite)
library(httr)
# Add the POST
browserPOST <- "curl -k -g -H \"Authorization: Token E3+KHKo1XCTdKJcbwp0IqD23fFo9tWjB5kNXukKSDhjRJcZztyzMryYlbZwhzMiHwbl5Ms4v0xCNoOShx9nTZEzYZx/C0000\" https://jobcase.interana.com/api/v1/query?query=%7B%0A%20%20%22dataset%22%3A%20%22events%22%2C%0A%20%20%22start%22%3A%201477281600000%2C%0A%20%20%22end%22%3A%201478145600000%2C%0A%20%20%22queries%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22type%22%3A%20%22single_measurement%22%2C%0A%20%20%20%20%20%20%22measure%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22aggregator%22%3A%20%22COUNT_STAR%22%2C%0A%20%20%20%20%20%20%20%20%22column%22%3A%20%22%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%22filter%22%3A%20%22%22%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22group_by%22%3A%20%5B%0A%20%20%20%20%22email_template_name%22%0A%20%20%5D%2C%0A%20%20%22sampled%22%3A%20true%0A%7D"
straight <- straighten(browserPOST)
res <- make_req(straight)
json_file = fromJSON(toJSON(content(res[[1]](), "text")))
fileConn<-file("C:\\temp\\temp.js")
writeLines(json_file, fileConn)
close(fileConn)
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "C:\\temp\\temp.js")
# Print the result.
print(result)
print (result$columns[[index]]$label[[1]])
index <- 1
rowCnt <- 1
mat<-matrix(list(), nrow=length(result$rows), ncol=length(result$columns))
# loop through each row
for (values in result$rows) {
for (row in values) {
for (item in row) {
mat[[rowCnt, index]] = item
if (index == length(result$columns)) {
index <- 1
rowCnt <- rowCnt + 1
} else {
index <- index + 1
}
}
}
}
rowCnt <- 1
columnName <- c()
# loop through each column
for (values in result$columns) {
for (column in values) {
for (item in column) {
if ((rowCnt %% 2)==0 ) {
print(item)
columnName <-c(columnName, item)
}
rowCnt = rowCnt +1
}
}
}
colnames(mat) <-columnName
df <- as.data.frame(mat)
df
response
response
as.data.frame(response)
library(chron)
Sys.time()
end_time <- as.chron(Sys.time())
end_time
end_time - 10
start_time <- <- as.chron("2013-07-24 23:55:26")
start_time <- end_time - 10
library(chron)
end_time <- as.chron(Sys.time())
start_time <- end_time - 10
start_time
end_time
query_item = list("filter" = "", "type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
#queries=list("queries" = query_item)
#params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "query" = list(queries))
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "queries" = list(query_item))
#query_params <- list("query" = params)
url <- "https://demo.interana.com/api/v1/query"
token <- "Token tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000"
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
library(httr)
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
library(jsonlite)
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
response <- fromJSON(content(r,as = "text"))
print(str(response))
library(rjson)
end_time <- as.chron(Sys.time())
start_time <- end_time - 10
query_item = list("filter" = "", "type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
#queries=list("queries" = query_item)
#params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "query" = list(queries))
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "queries" = list(query_item))
#query_params <- list("query" = params)
url <- "https://demo.interana.com/api/v1/query"
token <- "Token tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000"
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
response <- fromJSON(content(r,as = "text"))
print(str(response))
print(str(toJSON(response)))
print(as.data.frame(response))
cat_function <- function(love=TRUE){
if(love==TRUE){
print("I love cats!")
}
else {
print("I am not a cool person.")
}
}
cat_function()
cat_function(1)
cat_function(0)
cat_function(-1)
cat_function("foobar")
cat_function(TRUE)
get_interana_data <- function(days_prior=100,measure_type="single_measurement"){
print("in interana get data fn")
}
get_interana_data()
print(days_prior,measure_type)
get_interana_data <- function(days_prior=100,measure_type="single_measurement"){
print("in interana get data fn")
print(days_prior,measure_type)
}
get_interana_data()
get_interana_data <- function(days_prior=0,measure_type="single_measurement"){
print("in interana get data fn")
print(days_prior,measure_type)
}
get_interana_data()
get_interana_data <- function(days_prior=10){
print("in interana get data fn")
print(days_prior)
}
get_interana_data()
get_interana_data <- function(days_prior=100){
print("in interana get data fn")
print(days_prior)
}
get_interana_data()
get_interana_data <- function(days_prior=100, measure_type="test"){
print("in interana get data fn")
print(days_prior)
print(measure_type)
}
get_interana_data()
get_interana_data <- function(url, token, dataset,
days_prior=100,
measure_type="single_measurement",
agg_type="count_star",
column=""){
print("in interana get data fn")
print(days_prior)
print(measure_type)
print(agg_type)
print(column)
print(url)
print(token)
print(dataset)
}
get_interana_data()
get_interana_data("url","token","datset")
get_interana_data("url","token","datset")
get_interana_data <- function(url, token, dataset,
days_prior=100,
measure_type="single_measurement",
agg_type="count_star",
column=""){
print("in interana get data fn")
print(days_prior)
print(measure_type)
print(agg_type)
print(column)
print(url)
print(token)
print(dataset)
end_time <- as.chron(Sys.time())
start_time <- end_time - days_prior
query_item = list("filter" = "", "type" = "single_measurement","measure"=list("aggregator" = "count_star","column" = ""))
#queries=list("queries" = query_item)
#params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "query" = list(queries))
params <- list("end"=as.integer( as.POSIXct( end_time ) , tz = "UTC" )*1000, "start" = as.integer( as.POSIXct( start_time ) , tz = "UTC" )*1000, "dataset" = "music", "queries" = list(query_item))
#query_params <- list("query" = params)
url <- "https://demo.interana.com/api/v1/query"
token <- "Token tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000"
r <- GET(url, accept_json(), add_headers('Authorization' = token), query = paste("query=",URLencode(toJSON(params)),sep = ""))
response <- fromJSON(content(r,as = "text"))
#print(str(response))
#print(str(toJSON(response)))
print(as.data.frame(response))
return(as.data.frame(response))
}
get_interana_data("url","token","datset")
source('~/Documents/Interana/Engg/r-dev/interana_api_example.r')
get_interana_data("url","token","datset")
source('~/Documents/Interana/Engg/r-dev/interana_api_example.r')
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music")
source('~/Documents/Interana/Engg/r-dev/interana_api_example.r')
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music")
source('~/Documents/Interana/Engg/r-dev/interana_api_example.r')
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music")
source('~/Documents/Interana/Engg/r-dev/interana_api_example.r')
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music",days_prior=45)
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music",measure_type = "time_series")
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music",agg_type = "count_unique")
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music",agg_type = "count_unique", column = "userId")
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music",agg_type = "unique_count", column = "userId")
get_interana_data("demo.interana.com","tffZR6q0fbVqSBbeuvvLllLMLV0KHbuH+/DjXo9K=ER0PY/qNh+hdjEh+16DcL5Gc=BfHTJ7dE64x06YFWMbtbqtcdO90000","music",agg_type = "unique_count", column = "artist")
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("~/Documents/Interana/Engg/")
cwd()
Pwd()
pwd()
getwd()
setwd("~/Documents/Interana/Engg/github/interana-sdk/query_sdk/R")
getwd()
create("cats")
getwd()
setwd("./cats")
document()
setwd("..")
getwd()
install("cats")
?cats
?cat_function
cat_function(-1)
cat_function(1)
library(cats)
